* 4일차 [ 빅데이터 풀스택 과정(프론트 & 백엔드) ] *
- java 6일차 객체지향언어
  ㅇ 특징

  ㅇ 클래스와 객체 
       -> 클래스를 이용하여 객체를 생성!
	- 클래스의 정의 : 클래스란 객체를 정의해 놓은 것(설계도)
	- 클래스의 용도 : 객체를 생성하는데 사용
	  ** 클래스가 객체가 되는것은 아님!
	  ** new 라는 생성자를 통해서 객체를 생성하는 것임.

	- 객체의 정의 : 실제로 존재하는것, 사물 또는 개념
	- 객체의 용도 : 가지고 있는 기능과 속성에 따라 다름
	  ** 클래스에 정의되 내용대로 메모리에 생성된 것을 뜻한다.
	  ** 설계도만 있으면 객체를 여러개 형성할 수 있다.
	  ** 같은 객체를 여러개 형성하더라도 누구의 것이냐에 따라서 다른 객체가 된다
  ㅇ 클래스와 객체의 관계
       -> 클래스는 단지 객체를 생성하는데 사용
       -> 객체 그 자체는 아니다.
       -> 원하는 기능을 사용하기 위해서 클래스로부터 객체를 생성하는 과정이 선행

  * main 메서드
       -> 기본제공, 스택에 제일 먼저 입력되고 마지막에 pop됨

  ㅇ 객체의 생성 순서
       -> 클래스로부터 객체를 만드는 가정을의 클래스의 인스턴ㅅ화

  ㅇ 객체의 구성요소
       -> 속상과 기능 두 종류의 구성요소를 이룸
	- 속성(property) : 멤버변수, 특성, 필드, 상태  (동작을 하기위한 값들)
	- 기능(function) : 메서드, 함수  (실제동작)
	- 이중에서도 속성 보다는 멤버변수, 기능보다는 메서드를 주로 사용함


	class Car{
	      // 아래는 멤버변수
	      String color;
	      boolean power;
	      int speed;

	     // 아래는 메서드
	      void power() {power = !power;}
	      void speedUp() { speed++;}
	      void speedDown() { speed--;}
	}


  ㅇ 메서드
       -> 3가지 기능이 필요 (매개변수, 리턴타입, 메서드명)
	- 매개변수 : 
	- 리턴타입 : 돌려주는값, 리턴값
	- 메서드명 :
	- 접근제한자 리턴타입 메서드명(매개변수) {
	          
	  }
	- 메서드를 만드는 이유 
	    1) 재사용성을 높여서 코드의 길이를 줄임 [생산성 증대]
	    2) 유지보수를 쉽게 하기 위해

  ㅇ return : 
	1) 결과값을 돌려줘야 할때
	2) 메서드를 종료할때 사용, 메서드 뒤에 내용을 적을경우 실행 X

   ㅇ static 공부를 좀 더 해봐야할듯(이해 필요)